"""
Syst√®me de g√©n√©ration d'√©tat de l'art scientifique
Utilise Semantic Scholar API et un LLM (Gemini par d√©faut)
"""

import requests
import time
from typing import List, Dict, Optional
import streamlit as st
from dataclasses import dataclass
import google.generativeai as genai
import warnings

# Supprime les warnings non critiques
warnings.filterwarnings('ignore')

# ============================================================================
# SYST√àME D'AUTHENTIFICATION
# ============================================================================

def check_auth():
    """
    Syst√®me d'authentification simple.
    Retourne True si l'utilisateur est authentifi√©.
    """
    def password_entered():
        """V√©rifie si le mot de passe est correct"""
        # R√©cup√®re le mot de passe depuis les secrets Streamlit
        if "APP_PASSWORD" in st.secrets:
            correct_password = st.secrets["APP_PASSWORD"]
        else:
            # Mot de passe par d√©faut pour test local
            correct_password = "demo123"
        
        if st.session_state["password"] == correct_password:
            st.session_state["password_correct"] = True
            del st.session_state["password"]  # Supprime le mot de passe de la session
        else:
            st.session_state["password_correct"] = False

    # Premi√®re visite
    if "password_correct" not in st.session_state:
        st.markdown("### üîê Acc√®s restreint")
        st.text_input(
            "Mot de passe", 
            type="password", 
            on_change=password_entered, 
            key="password"
        )
        st.info("üí° Contactez l'administrateur pour obtenir le mot de passe")
        return False
    
    # Mot de passe incorrect
    elif not st.session_state["password_correct"]:
        st.markdown("### üîê Acc√®s restreint")
        st.text_input(
            "Mot de passe", 
            type="password", 
            on_change=password_entered, 
            key="password"
        )
        st.error("üòï Mot de passe incorrect")
        return False
    
    # Authentifi√© avec succ√®s
    else:
        return True

# ============================================================================
# CONFIGURATION
# ============================================================================

@dataclass
class Config:
    """Configuration centralis√©e pour faciliter le changement de LLM"""
    semantic_scholar_api_url: str = "https://api.semanticscholar.org/graph/v1"
    max_articles: int = 15  # Nombre maximum d'articles √† r√©cup√©rer
    llm_provider: str = "gemini"  # Facilite le changement futur
    gemini_model: str = "gemini-2.5-flash"  # Ou essayez "models/gemini-2.5-flash"
    

# ============================================================================
# CLASSE LLM ABSTRACTION (facilite le changement de LLM)
# ============================================================================

class LLMProvider:
    """
    Classe abstraite pour interagir avec diff√©rents LLM.
    Permet de changer facilement de provider (Gemini, GPT, Claude, etc.)
    """
    
    def __init__(self, api_key: str, provider: str = "gemini", model_name: str = "gemini-2.5-flash"):
        self.provider = provider
        self.api_key = api_key
        
        if provider == "gemini":
            genai.configure(api_key=api_key)
            self.model = genai.GenerativeModel(model_name)
    
    def generate(self, prompt: str) -> str:
        """
        G√©n√®re une r√©ponse √† partir d'un prompt.
        Cette m√©thode peut √™tre adapt√©e pour d'autres LLM.
        """
        try:
            if self.provider == "gemini":
                response = self.model.generate_content(prompt)
                # V√©rification de la r√©ponse
                if hasattr(response, 'text'):
                    return response.text
                elif hasattr(response, 'parts'):
                    # Parfois la r√©ponse est dans parts
                    return ''.join([part.text for part in response.parts])
                else:
                    st.error("‚ö†Ô∏è Le LLM a retourn√© une r√©ponse vide ou bloqu√©e")
                    return ""
            # Ajouter d'autres providers ici (GPT, Claude, etc.)
            else:
                raise ValueError(f"Provider {self.provider} non support√©")
        except Exception as e:
            st.error(f"Erreur LLM: {str(e)}")
            # Affiche plus d'infos pour d√©boguer
            if hasattr(e, 'message'):
                st.error(f"D√©tails: {e.message}")
            return ""


# ============================================================================
# SEMANTIC SCHOLAR API
# ============================================================================

class SemanticScholarAPI:
    """G√®re les interactions avec l'API Semantic Scholar"""
    
    def __init__(self, config: Config, api_key: Optional[str] = None):
        self.config = config
        self.base_url = config.semantic_scholar_api_url
        self.api_key = api_key
        self.headers = {}
        
        # Si une cl√© API est fournie, l'ajouter aux headers
        if self.api_key:
            self.headers['x-api-key'] = self.api_key
    
    def extract_keywords(self, question: str, llm: LLMProvider) -> List[str]:
        """
        Utilise le LLM pour extraire les mots-cl√©s pertinents de la question.
        Am√©liore la pr√©cision de la recherche sur Semantic Scholar.
        """
        prompt = f"""
        Analyse la question technique suivante et extrais 3-5 mots-cl√©s ou expressions cl√©s 
        en anglais pour rechercher des articles scientifiques pertinents.
        
        Question: {question}
        
        R√©ponds uniquement avec les mots-cl√©s s√©par√©s par des virgules, sans num√©rotation.
        Exemple: deep learning, neural networks, image classification
        """
        
        try:
            keywords_text = llm.generate(prompt)
            if not keywords_text or keywords_text.strip() == "":
                # Fallback : utilise la question directement
                st.warning("‚ö†Ô∏è Impossible d'extraire les mots-cl√©s, utilisation de la question compl√®te")
                return [question]
            # Nettoie et s√©pare les mots-cl√©s
            keywords = [k.strip() for k in keywords_text.split(',')]
            return keywords[:5]  # Limite √† 5 mots-cl√©s
        except Exception as e:
            st.error(f"Erreur lors de l'extraction des mots-cl√©s: {str(e)}")
            # Fallback : utilise la question directement
            return [question]
    
    def search_papers(self, query: str, limit: int = 15) -> List[Dict]:
        """
        Recherche des articles sur Semantic Scholar.
        Retourne une liste d'articles avec leurs m√©tadonn√©es.
        """
        url = f"{self.base_url}/paper/search"
        params = {
            'query': query,
            'limit': limit,
            'fields': 'title,abstract,authors,year,citationCount,publicationDate,url,paperId,tldr,openAccessPdf'
        }
        
        try:
            response = requests.get(url, params=params, headers=self.headers)
            response.raise_for_status()
            data = response.json()
            
            # Affiche des infos sur l'utilisation de la cl√© API
            if self.api_key:
                st.success("‚úÖ Cl√© API Semantic Scholar utilis√©e")
            else:
                st.info("‚ÑπÔ∏è Recherche sans cl√© API (limites r√©duites)")
            
            return data.get('data', [])
        except requests.exceptions.HTTPError as e:
            if e.response.status_code == 429:
                st.error("‚ö†Ô∏è Limite de taux atteinte. Veuillez patienter quelques secondes et r√©essayer.")
                st.info("üí° Astuce : R√©duisez le nombre d'articles ou attendez 1 minute avant de relancer.")
            else:
                st.error(f"Erreur API Semantic Scholar: {str(e)}")
            return []
        except requests.exceptions.RequestException as e:
            st.error(f"Erreur API Semantic Scholar: {str(e)}")
            return []
    
    def get_paper_details(self, paper_id: str) -> Optional[Dict]:
        """
        R√©cup√®re les d√©tails complets d'un article sp√©cifique.
        Utilis√© pour obtenir plus d'informations si n√©cessaire.
        """
        url = f"{self.base_url}/paper/{paper_id}"
        params = {
            'fields': 'title,abstract,authors,year,citationCount,references,citations,url,tldr,openAccessPdf,externalIds'
        }
        
        try:
            response = requests.get(url, params=params, headers=self.headers)
            response.raise_for_status()
            return response.json()
        except requests.exceptions.RequestException as e:
            st.error(f"Erreur lors de la r√©cup√©ration de l'article: {str(e)}")
            return None
    
    def fetch_paper_content(self, paper: Dict) -> Optional[str]:
        """
        Tente de r√©cup√©rer le contenu complet d'un article pour extraire un r√©sum√©.
        Essaie plusieurs sources : TLDR de Semantic Scholar, PDF Open Access, etc.
        """
        paper_id = paper.get('paperId')
        if not paper_id:
            return None
        
        # R√©cup√®re les d√©tails complets incluant TLDR et PDF
        details = self.get_paper_details(paper_id)
        if not details:
            return None
        
        # 1. Essaye d'abord le TLDR (r√©sum√© automatique de Semantic Scholar)
        if details.get('tldr') and details['tldr'].get('text'):
            return details['tldr']['text']
        
        # 2. V√©rifie si un PDF Open Access est disponible
        open_access = details.get('openAccessPdf')
        if open_access and open_access.get('url'):
            st.info(f"üìÑ PDF Open Access disponible pour: {paper.get('title', '')[:50]}...")
            return f"PDF disponible √†: {open_access['url']}"
        
        return None


# ============================================================================
# G√âN√âRATEUR D'√âTAT DE L'ART
# ============================================================================

class LiteratureReviewGenerator:
    """G√©n√®re l'√©tat de l'art √† partir des articles s√©lectionn√©s"""
    
    def __init__(self, llm: LLMProvider):
        self.llm = llm
    
    def summarize_paper(self, paper: Dict, semantic_api: 'SemanticScholarAPI') -> str:
        """
        G√©n√®re un r√©sum√© court d'un article pour la liste de validation.
        Tente d'abord d'utiliser l'abstract, puis le TLDR (d√©j√† r√©cup√©r√© lors de la recherche).
        """
        title = paper.get('title', 'Sans titre')
        abstract = paper.get('abstract', None)
        year = paper.get('year', 'N/A')
        
        # 1. Si abstract disponible, l'utiliser
        if abstract and abstract.strip():
            prompt = f"""
            R√©sume cet article scientifique en 2-3 phrases maximum, en fran√ßais.
            Concentre-toi sur la contribution principale et les r√©sultats cl√©s.
            
            Titre: {title}
            Ann√©e: {year}
            R√©sum√©: {abstract[:1000]}
            """
            
            summary = self.llm.generate(prompt)
            if summary and summary.strip():
                return summary
            return abstract[:300] + "..."
        
        # 2. Si pas d'abstract, essayer le TLDR de Semantic Scholar (d√©j√† dans les donn√©es)
        tldr = paper.get('tldr')
        if tldr and tldr.get('text'):
            tldr_text = tldr['text']
            prompt = f"""
            Traduis et reformule ce r√©sum√© en fran√ßais (2-3 phrases):
            
            Titre: {title}
            TLDR: {tldr_text}
            """
            summary = self.llm.generate(prompt)
            if summary and summary.strip():
                return summary
            return tldr_text
        
        # 3. V√©rifier si un PDF Open Access est disponible (d√©j√† dans les donn√©es)
        open_access = paper.get('openAccessPdf')
        if open_access and open_access.get('url'):
            return f"‚ö†Ô∏è R√©sum√© non disponible dans l'API. PDF Open Access disponible √†: {open_access['url']}"
        
        # 4. Si rien n'est disponible, indiquer clairement
        paper_url = paper.get('url', '')
        if paper_url:
            return f"‚ö†Ô∏è R√©sum√© non disponible. Consultez l'article complet: {paper_url}"
        return f"‚ö†Ô∏è R√©sum√© non disponible pour cet article."
    
    def generate_full_review(self, papers: List[Dict], question: str) -> str:
        """
        G√©n√®re l'√©tat de l'art complet (environ 2 pages).
        Structure: Introduction, Travaux existants, Limitations, Perspectives.
        """
        # Pr√©pare les informations sur les articles
        papers_info = []
        for i, paper in enumerate(papers, 1):
            authors_list = paper.get('authors', [])
            authors = ', '.join([a.get('name', '') for a in authors_list[:3]])
            if len(authors_list) > 3:
                authors += " et al."
            
            # Utilise l'abstract, ou le TLDR, ou le summary g√©n√©r√©
            abstract = paper.get('abstract', None)
            if abstract and abstract.strip():
                abstract_text = abstract[:800]
            elif paper.get('tldr') and paper.get('tldr').get('text'):
                abstract_text = paper['tldr']['text']
            else:
                # Utilise le summary qui a √©t√© g√©n√©r√© par summarize_paper
                abstract_text = paper.get('summary', 'Non disponible')[:800]
            
            info = f"""
            Article {i}:
            - Titre: {paper.get('title', 'N/A')}
            - Auteurs: {authors}
            - Ann√©e: {paper.get('year', 'N/A')}
            - Citations: {paper.get('citationCount', 0)}
            - R√©sum√©: {abstract_text}
            """
            papers_info.append(info)
        
        papers_text = "\n\n".join(papers_info)
        
        prompt = f"""
        Tu es un chercheur expert. R√©dige un √©tat de l'art scientifique complet et structur√© 
        en fran√ßais sur la question suivante: "{question}"
        
        Utilise les articles scientifiques ci-dessous comme base.
        
        {papers_text}
        
        Structure ton √©tat de l'art en QUATRE sections obligatoires:
        
        1. INTRODUCTION (1 paragraphe)
           - Contextualise la probl√©matique
           - Explique l'importance du sujet
        
        2. TRAVAUX EXISTANTS (60% du contenu)
           - Pr√©sente les contributions majeures de chaque article
           - Organise par th√®mes ou approches
           - Cite les auteurs et ann√©es entre parenth√®ses
           - Compare les m√©thodes et r√©sultats
        
        3. LIMITATIONS (20% du contenu)
           - Identifie les limites des approches actuelles
           - Points non r√©solus dans la litt√©rature
           - Contradictions ou d√©bats
        
        4. PERSPECTIVES ET AXES DE RECHERCHE (20% du contenu)
           - Directions futures prometteuses
           - Questions ouvertes
           - Recommandations pour de futurs travaux
        
        CONSIGNES:
        - Longueur: environ 2 pages (1000-1200 mots)
        - Style: acad√©mique mais accessible
        - Synth√®se: regroupe les travaux similaires
        - Citations: mentionne auteurs et ann√©es
        - Objectivit√©: pr√©sente les forces ET faiblesses
        
        R√©dige maintenant l'√©tat de l'art complet.
        """
        
        review = self.llm.generate(prompt)
        
        # V√©rification de la g√©n√©ration
        if not review or review.strip() == "":
            st.error("‚ö†Ô∏è La g√©n√©ration de l'√©tat de l'art a √©chou√©")
            return "Erreur lors de la g√©n√©ration. Veuillez r√©essayer ou changer de mod√®le LLM."
        
        return review


# ============================================================================
# INTERFACE STREAMLIT
# ============================================================================

def main():
    st.set_page_config(
        page_title="G√©n√©rateur d'√âtat de l'Art",
        page_icon="üìö",
        layout="wide"
    )

    # ========================================================================
    # AUTHENTIFICATION - PREMI√àRE CHOSE √Ä V√âRIFIER
    # ========================================================================
    if not check_auth():
        st.stop()  # Arr√™te tout si pas authentifi√©
    
    st.title("üìö G√©n√©rateur d'√âtat de l'Art Scientifique")
    st.markdown("*Propuls√© par Semantic Scholar et Gemini*")
    
    # ========================================================================
    # SIDEBAR: Configuration
    # ========================================================================
    with st.sidebar:
        st.header("‚öôÔ∏è Configuration")
        
        # Cl√© API Gemini
        api_key = st.text_input(
            "Cl√© API Gemini",
            type="password",
            help="Obtenir une cl√© sur https://makersuite.google.com/app/apikey"
        )
        
        # Cl√© API Semantic Scholar
        ss_api_key = st.text_input(
            "Cl√© API Semantic Scholar (optionnelle)",
            type="password",
            help="Obtenir une cl√© sur https://www.semanticscholar.org/product/api"
        )
        
        # S√©lection du mod√®le
        model_choice = st.selectbox(
            "Mod√®le Gemini",
            options=[ 
                "models/gemini-2.5-flash",
                "models/gemini-2.5-pro"
            ],
            index=0,
            help="Si un mod√®le ne fonctionne pas, essayez-en un autre"
        )
        
        # Nombre d'articles
        max_articles = st.slider(
            "Nombre d'articles √† rechercher",
            min_value=5,
            max_value=30,
            value=15
        )
        
        st.markdown("---")
        st.markdown("### üìñ Instructions")
        st.markdown("""
        1. Entrez votre cl√© API Gemini
        2. Posez votre question technique
        3. Validez les articles trouv√©s
        4. G√©n√©rez l'√©tat de l'art
        """)
    
    # V√©rifie la pr√©sence de la cl√© API
    if not api_key:
        st.warning("‚ö†Ô∏è Veuillez entrer votre cl√© API Gemini dans la barre lat√©rale")
        return
    
    # ========================================================================
    # INITIALISATION
    # ========================================================================
    config = Config(max_articles=max_articles)
    llm = LLMProvider(api_key=api_key, model_name=model_choice)
    semantic_api = SemanticScholarAPI(config, api_key=ss_api_key if ss_api_key else None)
    review_generator = LiteratureReviewGenerator(llm)
    
    # Initialise l'√©tat de session
    if 'papers' not in st.session_state:
        st.session_state.papers = []
    if 'question' not in st.session_state:
        st.session_state.question = ""
    if 'search_done' not in st.session_state:
        st.session_state.search_done = False
    
    # ========================================================================
    # √âTAPE 1: Question de l'utilisateur
    # ========================================================================
    st.header("1Ô∏è‚É£ Posez votre question")
    
    question = st.text_area(
        "Question technique",
        placeholder="Ex: Quelles sont les m√©thodes d'apprentissage par renforcement pour la robotique ?",
        height=100
    )
    
    col1, col2 = st.columns([1, 5])
    with col1:
        search_button = st.button("üîç Rechercher", type="primary")
    with col2:
        if st.session_state.search_done:
            if st.button("üîÑ Nouvelle recherche"):
                st.session_state.papers = []
                st.session_state.search_done = False
                st.rerun()
    
    # ========================================================================
    # √âTAPE 2: Recherche et affichage des articles
    # ========================================================================
    if search_button and question:
        st.session_state.question = question
        
        with st.spinner("üîé Extraction des mots-cl√©s..."):
            keywords = semantic_api.extract_keywords(question, llm)
            st.info(f"**Mots-cl√©s identifi√©s:** {', '.join(keywords)}")
        
        with st.spinner("üìñ Recherche d'articles sur Semantic Scholar..."):
            # Recherche avec les mots-cl√©s combin√©s
            query = ' '.join(keywords)
            papers = semantic_api.search_papers(query, limit=max_articles)
            
            if not papers:
                st.error("Aucun article trouv√©. Essayez de reformuler votre question.")
                return
            
            st.success(f"‚úÖ {len(papers)} articles trouv√©s !")
        
        # G√©n√®re les r√©sum√©s
        with st.spinner("‚úçÔ∏è G√©n√©ration des r√©sum√©s..."):
            for i, paper in enumerate(papers):
                # Ajoute un d√©lai pour respecter les limites de taux de l'API
                if i > 0:
                    time.sleep(1.0)  # Pause de 1 seconde entre chaque r√©sum√©
                
                try:
                    paper['summary'] = review_generator.summarize_paper(paper, semantic_api)
                except Exception as e:
                    st.warning(f"‚ö†Ô∏è Erreur lors de la g√©n√©ration du r√©sum√© pour '{paper.get('title', 'Article')[:50]}...': {str(e)}")
                    paper['summary'] = f"Erreur de g√©n√©ration. Consultez l'article: {paper.get('url', 'URL non disponible')}"
        
        st.session_state.papers = papers
        st.session_state.search_done = True
    
    # ========================================================================
    # AFFICHAGE DES R√âSULTATS
    # ========================================================================
    if st.session_state.search_done and st.session_state.papers:
        st.header("2Ô∏è‚É£ Articles trouv√©s")
        st.markdown(f"**Question:** {st.session_state.question}")
        
        # S√©lection des articles
        st.subheader("S√©lectionnez les articles √† inclure dans l'√©tat de l'art")
        
        selected_papers = []
        for i, paper in enumerate(st.session_state.papers):
            with st.expander(
                f"üìÑ {paper.get('title', 'Sans titre')} ({paper.get('year', 'N/A')})",
                expanded=(i < 3)  # Les 3 premiers sont ouverts par d√©faut
            ):
                # Checkbox de s√©lection
                is_selected = st.checkbox(
                    "Inclure dans l'√©tat de l'art",
                    value=True,  # Tous s√©lectionn√©s par d√©faut
                    key=f"select_{i}"
                )
                
                # Informations sur l'article
                authors = paper.get('authors', [])
                author_names = ', '.join([a.get('name', '') for a in authors[:3]])
                if len(authors) > 3:
                    author_names += f" et al."
                
                col1, col2 = st.columns(2)
                with col1:
                    st.markdown(f"**Auteurs:** {author_names}")
                    st.markdown(f"**Ann√©e:** {paper.get('year', 'N/A')}")
                with col2:
                    st.markdown(f"**Citations:** {paper.get('citationCount', 0)}")
                    if paper.get('url'):
                        st.markdown(f"[üîó Lien]({paper['url']})")
                
                st.markdown("**R√©sum√©:**")
                st.write(paper.get('summary', 'R√©sum√© non disponible'))
                
                if is_selected:
                    selected_papers.append(paper)
        
        st.markdown(f"**{len(selected_papers)} articles s√©lectionn√©s**")
        
        # ====================================================================
        # √âTAPE 3: G√©n√©ration de l'√©tat de l'art
        # ====================================================================
        st.header("3Ô∏è‚É£ G√©n√©ration de l'√©tat de l'art")
        
        if st.button("üìù G√©n√©rer l'√©tat de l'art complet", type="primary", disabled=len(selected_papers) == 0):
            if len(selected_papers) == 0:
                st.warning("‚ö†Ô∏è Veuillez s√©lectionner au moins un article")
            else:
                with st.spinner("‚ú® G√©n√©ration de l'√©tat de l'art en cours... (cela peut prendre 1-2 minutes)"):
                    try:
                        review = review_generator.generate_full_review(
                            selected_papers,
                            st.session_state.question
                        )
                        
                        if review and review.strip() != "":
                            st.success("‚úÖ √âtat de l'art g√©n√©r√© avec succ√®s !")
                            
                            # Affichage de l'√©tat de l'art
                            st.markdown("---")
                            st.markdown("## üìë √âtat de l'art")
                            st.markdown(review)
                            
                            # Bouton de t√©l√©chargement
                            st.download_button(
                                label="üíæ T√©l√©charger l'√©tat de l'art",
                                data=review,
                                file_name="etat_de_lart.txt",
                                mime="text/plain"
                            )
                        else:
                            st.error("‚ùå La g√©n√©ration a √©chou√©. Essayez avec un autre mod√®le LLM.")
                    except Exception as e:
                        st.error(f"‚ùå Erreur lors de la g√©n√©ration : {str(e)}")
                        st.info("üí° Essayez de s√©lectionner moins d'articles ou changez de mod√®le LLM")


if __name__ == "__main__":

    main()
